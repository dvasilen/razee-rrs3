/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	"time"

	v1alpha2 "github.com/dvasilen/razee-rrs3/pkg/apis/razee/v1alpha2"
	scheme "github.com/dvasilen/razee-rrs3/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RemoteResourceS3sGetter has a method to return a RemoteResourceS3Interface.
// A group's client should implement this interface.
type RemoteResourceS3sGetter interface {
	RemoteResourceS3s(namespace string) RemoteResourceS3Interface
}

// RemoteResourceS3Interface has methods to work with RemoteResourceS3 resources.
type RemoteResourceS3Interface interface {
	Create(*v1alpha2.RemoteResourceS3) (*v1alpha2.RemoteResourceS3, error)
	Update(*v1alpha2.RemoteResourceS3) (*v1alpha2.RemoteResourceS3, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha2.RemoteResourceS3, error)
	List(opts v1.ListOptions) (*v1alpha2.RemoteResourceS3List, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.RemoteResourceS3, err error)
	RemoteResourceS3Expansion
}

// remoteResourceS3s implements RemoteResourceS3Interface
type remoteResourceS3s struct {
	client rest.Interface
	ns     string
}

// newRemoteResourceS3s returns a RemoteResourceS3s
func newRemoteResourceS3s(c *DeployV1alpha2Client, namespace string) *remoteResourceS3s {
	return &remoteResourceS3s{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the remoteResourceS3, and returns the corresponding remoteResourceS3 object, and an error if there is any.
func (c *remoteResourceS3s) Get(name string, options v1.GetOptions) (result *v1alpha2.RemoteResourceS3, err error) {
	result = &v1alpha2.RemoteResourceS3{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("remoteresources3s").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RemoteResourceS3s that match those selectors.
func (c *remoteResourceS3s) List(opts v1.ListOptions) (result *v1alpha2.RemoteResourceS3List, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha2.RemoteResourceS3List{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("remoteresources3s").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested remoteResourceS3s.
func (c *remoteResourceS3s) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("remoteresources3s").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a remoteResourceS3 and creates it.  Returns the server's representation of the remoteResourceS3, and an error, if there is any.
func (c *remoteResourceS3s) Create(remoteResourceS3 *v1alpha2.RemoteResourceS3) (result *v1alpha2.RemoteResourceS3, err error) {
	result = &v1alpha2.RemoteResourceS3{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("remoteresources3s").
		Body(remoteResourceS3).
		Do().
		Into(result)
	return
}

// Update takes the representation of a remoteResourceS3 and updates it. Returns the server's representation of the remoteResourceS3, and an error, if there is any.
func (c *remoteResourceS3s) Update(remoteResourceS3 *v1alpha2.RemoteResourceS3) (result *v1alpha2.RemoteResourceS3, err error) {
	result = &v1alpha2.RemoteResourceS3{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("remoteresources3s").
		Name(remoteResourceS3.Name).
		Body(remoteResourceS3).
		Do().
		Into(result)
	return
}

// Delete takes name of the remoteResourceS3 and deletes it. Returns an error if one occurs.
func (c *remoteResourceS3s) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("remoteresources3s").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *remoteResourceS3s) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("remoteresources3s").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched remoteResourceS3.
func (c *remoteResourceS3s) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.RemoteResourceS3, err error) {
	result = &v1alpha2.RemoteResourceS3{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("remoteresources3s").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
